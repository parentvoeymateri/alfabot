const { Telegraf } = require('telegraf');
const express = require('express');
const { Pool } = require('pg');
const Redis = require('ioredis');
const Queue = require('bull');
const winston = require('winston');
require('dotenv').config();

const app = express();
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  TOKEN: process.env.TELEGRAM_TOKEN,
  POSTGRES_URL: process.env.POSTGRES_URL,
  REDIS_URL: process.env.REDIS_URL,
  WEBHOOK_URL: process.env.WEBHOOK_URL,
  ADMINS: [417951708],
  OFFER_DOC_URL: 'https://alfabank.servicecdn.ru/site-upload/64/1d/11483/Alfa_Future_Scholarships_For_Students_Regulations.pdf',
  APPLICATION_URL: 'https://docs.google.com/document/d/1XLokL8-yUEtJBZvm1ee1n59ScAmChoCD2JSa7-FP9LQ/edit?tab=t.0',
  SOPD_URL: 'https://docs.google.com/document/d/1DctmqN3xaEsbPk0yoIDsYTlbYoUOQyYIQCILdjZz0nI/edit?tab=t.0',
  POLICY_URL: 'https://alfabank.servicecdn.ru/site-upload/cb/dc/4263/pdn.pdf',
  FORM_URL: 'https://a28861.webask.io/ffbndoiha',
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'bot.log' })
  ]
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
const bot = new Telegraf(CONFIG.TOKEN);

// PostgreSQL
const pool = new Pool({ connectionString: CONFIG.POSTGRES_URL });

// Redis –∏ –æ—á–µ—Ä–µ–¥—å
const redis = new Redis(CONFIG.REDIS_URL);
const messageQueue = new Queue('messages', CONFIG.REDIS_URL);

// –£—Ç–∏–ª–∏—Ç—ã
const normalizeFio = str => String(str).toLowerCase().replace(/\s+/g, ' ').trim();
const denormalizeFio = str => str.split(' ').map(s => s ? s[0].toUpperCase() + s.slice(1) : '').join(' ');
const isEmail = t => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(String(t).trim());
const isAdminId = id => CONFIG.ADMINS.includes(Number(id));

// –¢–µ–∫—Å—Ç—ã
const TEMPLATES = {
  BANK_CONFIRMED:
    '–ü—Ä–∏–≤–µ—Ç!\n' +
    '–ë–∞–Ω–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞ –ø–æ—á—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –æ—Ñ–µ—Ä—Ç–µ.\n\n' +
    '–í—Å–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–µ–Ω—ã, –∂–¥–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–∞–º.\n' +
    '–ê —Ç–∞–∫–∂–µ –≤—Å—Ç—É–ø–∞–π –≤ –ê–ª—å—Ñ–∞ –ö–ª—É–± –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ‚Äî –∫–∞—Ä—å–µ—Ä–Ω–æ-–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É ' +
    '–¥–ª—è –ª—É—á—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω—ã  https://t.me/+bTj7nfzcjDNiNWEy',
  DOCS_NEED_FIX:
    '–ü—Ä–∏–≤–µ—Ç!\n\n' +
    'üì¨ –ö–æ–º–∞–Ω–¥–∞ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ —Ç–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n' +
    '<b>–°–µ–π—á–∞—Å –ø—Ä–∏–Ω—è—Ç—å –∏—Ö –Ω–µ –º–æ–∂–µ–º.</b>\n\n' +
    '–ü—Ä–∏—á–∏–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –ø–∏—Å—å–º–µ –Ω–∞ —Ç–≤–æ—é –ø–æ—á—Ç—É.\n\n' +
    '–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:\n' +
    '‚Ä¢ –í–Ω–µ—Å–∏ –ø—Ä–∞–≤–∫–∏ –ø–æ –∑–∞–º–µ—á–∞–Ω–∏—è–º –∏–∑ –ø–∏—Å—å–º–∞.\n' +
    '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –Ω–∞ –ø–æ—á—Ç—É <b> alfa_chance@alfabank.ru</b>.\n\n' +
    '–ö–∞–∫ –ø—Ä–∏—à–ª—ë—à—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç ‚Äî –º—ã –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º –∏ –≤–µ—Ä–Ω—ë–º—Å—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.'
};

const makeFaqText = () => (
  '<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n' +
  '1Ô∏è‚É£ <b>–ö–æ–≥–¥–∞ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?</b>\n' +
  '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ ‚Äî –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Å–µ–Ω—Ç—è–±—Ä—å).\n\n' +
  '2Ô∏è‚É£ <b>–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?</b>\n' +
  '‚Ä¢ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –æ—Ñ–µ—Ä—Ç–µ (—Å–∫–∞–Ω + .docx)\n' +
  '‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n' +
  '‚Ä¢ –ö–æ–ø–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞\n' +
  '‚Ä¢ –°–ø—Ä–∞–≤–∫–∞ —Å –º–µ—Å—Ç–∞ —É—á—ë–±—ã\n\n' +
  '3Ô∏è‚É£ <b>–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?</b>\n' +
  '–ù–∞ –ø–æ—á—Ç—É: <b> alfa_chance@alfabank.ru</b>\n\n' +
  '4Ô∏è‚É£ <b>–ù—É–∂–µ–Ω –ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª?</b>\n' +
  '–ù–µ—Ç –≤ –ø–∏—Å—å–º–µ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–∞–Ω–æ–≤.\n\n' +
  '–ü–æ–∑–∂–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –°–û–ü–î –ø–æ –ø–æ—á—Ç–µ, –∞–¥—Ä–µ—Å –∏ –¥–∞—Ç—É —Å–æ–æ–±—â–∏–º —á–µ—Ä–µ–∑ –±–æ—Ç.\n\n' +
  '5Ô∏è‚É£ <b>–ö–∞–∫ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞—è–≤–∫—É –∫ –æ—Ñ–µ—Ä—Ç–µ?</b>\n' +
  '–ú–æ–∂–Ω–æ –∏ —Ä—É—á–∫–æ–π, –º–æ–∂–Ω–æ –∏ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ, –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–∏—Ç–∞–ª–∞—Å—å.\n\n' +
  '6Ô∏è‚É£ <b>–ö–∞–∫ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –º–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ—à–ª–∏?</b>\n' +
  '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ email –æ—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n' +
  '7Ô∏è‚É£ <b>–ú–æ–≥—É –ª–∏ —É–∑–Ω–∞—Ç—å –≤–µ—Å—å —Å–æ—Å—Ç–∞–≤ —Å—Ç–∏–ø–µ–Ω–¥–∏–∞—Ç–æ–≤ –∏ –∫–æ–≥–¥–∞?</b>\n' +
  '–î–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ –¥–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞.'
);

// –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function getLookupSet() {
  const cacheKey = 'lookup_fio_set';
  const cached = await redis.get(cacheKey);
  if (cached) return new Set(JSON.parse(cached));
  
  const { rows } = await pool.query('SELECT normalized_fio FROM lookup');
  const set = new Set(rows.map(row => row.normalized_fio));
  await redis.set(cacheKey, JSON.stringify([...set]), 'EX', 86400); // 24 —á–∞—Å–∞
  logger.info(`Lookup set cached, size: ${set.size}`);
  return set;
}

async function existsInLookupByFio(fioNormalized) {
  const set = await getLookupSet();
  return set.has(fioNormalized);
}

async function findProfileByChatId(chatId) {
  const { rows } = await pool.query('SELECT * FROM profiles WHERE chat_id = $1', [chatId]);
  return rows[0] || null;
}

async function findProfileByFio(fioNormalized) {
  const { rows } = await pool.query('SELECT * FROM profiles WHERE normalized_fio = $1', [fioNormalized]);
  return rows[0] || null;
}

async function ensureProfileRowByFio(fioNormalized, user) {
  let profile = await findProfileByFio(fioNormalized);
  if (!profile) {
    const { rows } = await pool.query(
      'INSERT INTO profiles (fio, normalized_fio, status, chat_id, username, first_name, last_name, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *',
      [denormalizeFio(fioNormalized), fioNormalized, '–ù–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–∞—Ö (–æ–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è)', user.chatId, user.username, user.firstName, user.lastName, new Date()]
    );
    profile = rows[0];
    logger.info(`Created new profile for ${fioNormalized}: id=${profile.id}`);
  }
  return profile;
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è
async function setState(chatId, stateObj) {
  await redis.set(`state_${chatId}`, JSON.stringify(stateObj), 'EX', 86400);
}

async function getState(chatId) {
  const raw = await redis.get(`state_${chatId}`);
  return raw ? JSON.parse(raw) : null;
}

async function clearState(chatId) {
  await redis.del(`state_${chatId}`);
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async ctx => {
  const chatId = ctx.chat.id;
  const user = {
    chatId,
    username: ctx.from.username || '',
    firstName: ctx.from.first_name || '',
    lastName: ctx.from.last_name || ''
  };
  
  const profile = await findProfileByChatId(chatId);
  if (profile) {
    await pool.query(
      'UPDATE profiles SET username = $1, first_name = $2, last_name = $3 WHERE chat_id = $4',
      [user.username, user.firstName, user.lastName, chatId]
    );
  }

  await ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã ¬´–ê–ª—å—Ñ–∞-–ë—É–¥—É—â–µ–µ | –°—Ç–∏–ø–µ–Ω–¥–∏–∏¬ª üéì‚ú®\n\n' +
    '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏—é.\n' +
    '–ü—Ä–æ–¥–æ–ª–∂–∞—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, –≤—ã –¥–∞—ë—Ç–µ —Å–≤–æ—ë –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
    {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[{ text: 'üìÑ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', url: CONFIG.POLICY_URL }]]
      }
    }
  );
  await ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é, –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ).\n\n<i>–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>',
    { parse_mode: 'HTML' }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /faq
bot.command('faq', async ctx => {
  await ctx.reply(makeFaqText(), { parse_mode: 'HTML' });
});

// –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
bot.command('bank_ok_row', async ctx => {
  if (!isAdminId(ctx.from.id)) {
    await ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
    return;
  }
  const nums = ctx.message.text.match(/\d+/g) || [];
  if (!nums.length) {
    await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: /bank_ok_row 257');
    return;
  }

  const results = [];
  for (const id of nums) {
    const { rows } = await pool.query('SELECT * FROM profiles WHERE id = $1', [id]);
    const profile = rows[0];
    if (profile && profile.chat_id) {
      await ctx.telegram.sendMessage(profile.chat_id, TEMPLATES.BANK_CONFIRMED, { parse_mode: 'HTML' });
      await pool.query('UPDATE profiles SET status = $1 WHERE id = $2', ['–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –±–∞–Ω–∫–æ–º (–∂–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤)', id]);
      results.push(`—Å—Ç—Ä–æ–∫–∞ ${id}: OK (chat_id=${profile.chat_id})`);
    } else {
      results.push(`—Å—Ç—Ä–æ–∫–∞ ${id}: –Ω–µ—Ç CHAT_ID`);
    }
  }
  await ctx.reply(`–†–µ–∑—É–ª—å—Ç–∞—Ç:\n${results.join('\n')}`);
});

bot.command('bank_fix_row', async ctx => {
  if (!isAdminId(ctx.from.id)) {
    await ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
    return;
  }

  const parseRows = s => {
    const set = new Set();
    for (const part of s.replace(/^[\/\\]bank_fix_row/i, '').trim().split(/[\s,]+/).filter(Boolean)) {
      if (part.includes('-')) {
        const [a, b] = part.split('-').map(x => parseInt(x, 10));
        if (Number.isInteger(a) && Number.isInteger(b)) {
          const from = Math.min(a, b), to = Math.max(a, b);
          for (let i = from; i <= to; i++) set.add(i);
        }
      } else {
        const n = parseInt(part, 10);
        if (Number.isInteger(n)) set.add(n);
      }
    }
    return [...set];
  };

  const rows = parseRows(ctx.message.text);
  if (!rows.length) {
    await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) —Å—Ç—Ä–æ–∫: /bank_fix_row 12 18 25-30');
    return;
  }

  const ok = [], noChat = [], bad = [];
  for (const id of rows) {
    try {
      const { rows } = await pool.query('SELECT * FROM profiles WHERE id = $1', [id]);
      const profile = rows[0];
      if (profile && profile.chat_id) {
        await ctx.telegram.sendMessage(profile.chat_id, TEMPLATES.DOCS_NEED_FIX, { parse_mode: 'HTML' });
        await pool.query(
          'UPDATE profiles SET status = $1, last_action = $2, last_seen_ts = $3 WHERE id = $4',
          ['–î–æ–∫—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', new Date(), id]
        );
        ok.push(id);
      } else {
        noChat.push(id);
      }
    } catch (e) {
      bad.push(id);
      logger.error(`Error processing row ${id}: ${e}`);
    }
  }

  await ctx.reply(
    `–†–µ–∑—É–ª—å—Ç–∞—Ç:\n` +
    (ok.length ? `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${ok.join(', ')}\n` : '') +
    (noChat.length ? `‚ö†Ô∏è –ù–µ—Ç CHAT_ID: ${noChat.join(', ')}\n` : '') +
    (bad.length ? `‚ùå –û—à–∏–±–∫–∞: ${bad.join(', ')}` : '')
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async ctx => {
  const chatId = ctx.chat.id;
  const text = ctx.message.text.trim();
  logger.info(`Received message from ${chatId}: ${text}`);

  const user = {
    chatId,
    username: ctx.from.username || '',
    firstName: ctx.from.first_name || '',
    lastName: ctx.from.last_name || ''
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–∂–∏–¥–∞–Ω–∏–µ email)
  const state = await getState(chatId);
  if (state && state.await === 'email' && state.profileId) {
    if (!isEmail(text)) {
      await ctx.reply('–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ email. –ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>name@example.com</i>.', { parse_mode: 'HTML' });
      return;
    }
    await pool.query(
      'UPDATE profiles SET email = $1, docs_email = $2, docs_email_ts = $3, status = $4 WHERE id = $5',
      [text, '–û—Ç–ø—Ä–∞–≤–∏–ª', new Date(), '–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–æ–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫—É)', state.profileId]
    );
    await clearState(chatId);
    await ctx.reply(
      '–°–ø–∞—Å–∏–±–æ! –ö–æ–º–∞–Ω–¥–∞ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —Å –ø–æ—á—Ç—ã <b> alfa_chance@alfabank.ru</b> –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. ‚úÖ',
      { parse_mode: 'HTML' }
    );
    await ctx.reply(
      `<b>üëâ –®–∞–≥ 2.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ —Ç—É –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ–æ—Ä–º–µ.\n${CONFIG.FORM_URL}`,
      {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: [[{ text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ', url: CONFIG.FORM_URL }, { text: '‚úÖ –û–ø—Ä–æ—Å –ø—Ä–æ–π–¥–µ–Ω', callback_data: `survey_done|${state.profileId}` }]] }
      }
    );
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ email –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (isEmail(text)) {
    const profile = await findProfileByChatId(chatId);
    if (profile) {
      await pool.query(
        'UPDATE profiles SET email = $1, docs_email = $2, docs_email_ts = $3, status = $4 WHERE chat_id = $5',
        [text, '–û—Ç–ø—Ä–∞–≤–∏–ª', new Date(), '–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–æ–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫—É)', chatId]
      );
      await clearState(chatId);
      await ctx.reply(
        '–°–ø–∞—Å–∏–±–æ! –ö–æ–º–∞–Ω–¥–∞ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —Å –ø–æ—á—Ç—ã <b> alfa_chance@alfabank.ru</b> –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. ‚úÖ',
        { parse_mode: 'HTML' }
      );
      await ctx.reply(
        `<b>üëâ –®–∞–≥ 2.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ —Ç—É –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ–æ—Ä–º–µ.\n${CONFIG.FORM_URL}`,
        {
          parse_mode: 'HTML',
          reply_markup: { inline_keyboard: [[{ text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ', url: CONFIG.FORM_URL }, { text: '‚úÖ –û–ø—Ä–æ—Å –ø—Ä–æ–π–¥–µ–Ω', callback_data: `survey_done|${profile.id}` }]] }
        }
      );
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
  const fioNorm = normalizeFio(text);
  if (fioNorm.length < 3) {
    await ctx.reply('–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é.', { parse_mode: 'HTML' });
    return;
  }
  if (!(await existsInLookupByFio(fioNorm))) {
    await ctx.reply(
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–º, –ª–∏–±–æ –§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É alfa_chance@alfabank.ru –ø–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π "–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ_–§–ò–û"\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
      { parse_mode: 'HTML' }
    );
    return;
  }

  let profile = await findProfileByChatId(chatId);
  if (!profile) profile = await ensureProfileRowByFio(fioNorm, user);

  await ctx.reply(
    '–£—Ä–∞! –í—ã –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏—é.\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏–∞—Ç–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ—Ñ–µ—Ä—Ç–æ–π (–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 4 –ü–æ–ª–æ–∂–µ–Ω–∏—è).',
    {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: '–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π', url: CONFIG.OFFER_DOC_URL }],
          [
            { text: '–°–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ñ–µ—Ä—Ç–æ–π', callback_data: `agree|${profile.id}` },
            { text: '–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data: `decline|${profile.id}` }
          ]
        ]
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async ctx => {
  const chatId = ctx.chat.id;
  const [action, profileId] = ctx.callbackQuery.data.split('|');
  logger.info(`Callback from ${chatId}: ${action}|${profileId}`);

  if (action === 'faq') {
    await ctx.reply(makeFaqText(), { parse_mode: 'HTML' });
    await ctx.answerCbQuery('–ü—Ä–∏–Ω—è—Ç–æ');
    return;
  }

  if (!profileId) {
    await ctx.reply('–û—à–∏–±–∫–∞.');
    await ctx.answerCbQuery('–ü—Ä–∏–Ω—è—Ç–æ');
    return;
  }

  if (action === 'agree') {
    await pool.query(
      'UPDATE profiles SET status = $1, consent = $2, consent_ts = $3 WHERE id = $4 AND chat_id = $5',
      ['–û—Ñ–µ—Ä—Ç–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã)', '–î–∞', new Date(), profileId, chatId]
    );
    await ctx.reply(
      '–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n' +
      '–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Å—Ç–∏–ø–µ–Ω–¥–∏–∞—Ç–æ–º, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤:\n\n' +
      'üëâ –®–∞–≥ 1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É <b> alfa_chance@alfabank.ru</b> –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–∏–º –ø–∏—Å—å–º–æ–º –¥–æ <b>30 —Å–µ–Ω—Ç—è–±—Ä—è</b>...\n' +
      '–¢–µ–º–∞ –ø–∏—Å—å–º–∞ <b>"–°—Ç–∏–ø–µ–Ω–¥–∏–∞—Ç 2025 –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é"</b>',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –æ—Ñ–µ—Ä—Ç–µ', url: CONFIG.APPLICATION_URL }],
            [{ text: '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', url: CONFIG.SOPD_URL }]
          ]
        }
      }
    );
    await ctx.reply(
      '–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n' +
      '<i>–í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ—á—Ç—É!¬ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ —Å –ø–∞–∫–µ—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.</i>',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[{ text: '‚úÖ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ—á—Ç—É!', callback_data: `docs_sent|${profileId}` }]]
        }
      }
    );
    await ctx.answerCbQuery('–ü—Ä–∏–Ω—è—Ç–æ');
  } else if (action === 'decline') {
    await pool.query(
      'UPDATE profiles SET status = $1, consent = $2, consent_ts = $3 WHERE id = $4 AND chat_id = $5',
      ['–û—Ñ–µ—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', '–ù–µ—Ç', new Date(), profileId, chatId]
    );
    await ctx.reply(
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è —Å –æ—Ñ–µ—Ä—Ç–æ–π –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å —Å—Ç–∏–ø–µ–Ω–¥–∏–∞—Ç–æ–º. –ï—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –°–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ñ–µ—Ä—Ç–æ–π.',
      { parse_mode: 'HTML' }
    );
    await ctx.answerCbQuery('–ü—Ä–∏–Ω—è—Ç–æ');
  } else if (action === 'docs_sent') {
    await pool.query(
      'UPDATE profiles SET docs_email = $1, docs_email_ts = $2, status = $3 WHERE id = $4 AND chat_id = $5',
      ['–û—Ç–ø—Ä–∞–≤–∏–ª', new Date(), '–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–æ–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫—É)', profileId, chatId]
    );
    await setState(chatId, { await: 'email', profileId });
    await ctx.reply(
      '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>email</b>, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, name@example.com).\n\n' +
      '<i>–ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ –æ—à–∏–±–∫–µ ‚Äî –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É.</i>',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[{ text: '‚ùå –û—à–∏–±—Å—è, –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –¥–æ–∫—É–º–µ–Ω—Ç—ã', callback_data: `docs_undo|${profileId}` }]]
        }
      }
    );
    await ctx.answerCbQuery('–ü—Ä–∏–Ω—è—Ç–æ');
  } else if (action === 'docs_undo') {
    await pool.query(
      'UPDATE profiles SET docs_email = NULL, docs_email_ts = NULL, status = $1 WHERE id = $2 AND chat_id = $3',
      ['–û—Ñ–µ—Ä—Ç–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã)', profileId, chatId]
    );
    await clearState(chatId);
    await ctx.reply('–û–∫, –æ—Ç–º–µ—Ç–∫—É —Å–Ω—è–ª–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ—á—Ç—É!¬ª –ø–æ—Å–ª–µ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞.', { parse_mode: 'HTML' });
    await ctx.answerCbQuery('–ü—Ä–∏–Ω—è—Ç–æ');
  } else if (action === 'survey_done') {
    await pool.query(
      'UPDATE profiles SET survey = $1, survey_ts = $2, status = $3, last_action = $4, last_seen_ts = $5 WHERE id = $6 AND chat_id = $7',
      ['–î–∞', new Date(), '–û–ø—Ä–æ—Å –ø—Ä–æ–π–¥–µ–Ω', '–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω', new Date(), profileId, chatId]
    );
    await ctx.reply('–°–ø–∞—Å–∏–±–æ! ‚úÖ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã. –ö–æ–º–∞–Ω–¥–∞ –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ –≤–∞–º –ø–æ –ø–æ—á—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', { parse_mode: 'HTML' });
    await ctx.reply('–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –ø–æ—á—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã alfa_chance@alfabank.ru', { parse_mode: 'HTML' });
    await ctx.answerCbQuery('–ü—Ä–∏–Ω—è—Ç–æ');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
messageQueue.process(async job => {
  const { chatId, text } = job.data;
  logger.info(`Processing queued message from ${chatId}: ${text}`);
  // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
});

// –í–µ–±—Ö—É–∫ –¥–ª—è Telegram
app.post('/webhook', async (req, res) => {
  try {
    const updateId = req.body.update_id;
    if (!updateId) {
      logger.warn('No update_id in webhook request');
      return res.status(200).send('OK');
    }
    
    const cacheKey = `update_${updateId}`;
    const cached = await redis.get(cacheKey);
    if (cached) {
      logger.info(`Duplicate update skipped: ${updateId}`);
      return res.status(200).send('OK');
    }
    
    await redis.set(cacheKey, '1', 'EX', 86400);
    await bot.handleUpdate(req.body);
    logger.info(`Processed update: ${updateId}`);
    res.status(200).send('OK');
  } catch (err) {
    logger.error(`Webhook error: ${err.stack}`);
    res.status(200).send('OK');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
async function checkWebhook() {
  try {
    const response = await bot.telegram.getWebhookInfo();
    logger.info(`Webhook info: ${JSON.stringify(response)}`);
    if (!response.url || response.url !== CONFIG.WEBHOOK_URL || response.pending_update_count > 10) {
      logger.warn('Resetting webhook due to issues');
      await bot.telegram.deleteWebhook({ drop_pending_updates: true });
      await bot.telegram.setWebhook(CONFIG.WEBHOOK_URL);
      if (CONFIG.ADMINS[0]) {
        await bot.telegram.sendMessage(CONFIG.ADMINS[0], 'Webhook was reset due to issues');
      }
    }
  } catch (err) {
    logger.error(`Error checking webhook: ${err}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  logger.info(`Server running on port ${PORT}`);
  await bot.telegram.setWebhook(CONFIG.WEBHOOK_URL);
  logger.info('Webhook set');
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
  setInterval(checkWebhook, 10 * 60 * 1000);
});